{"context": "Give phishing attempts over email that did not use identity immitation between 20:54.33 and 21:05.12 on 2022-10-05. ", "baseline": "EmailEvents\n| where Timestamp between(datetime(\" 2022-10-05T20:54:33Z\") .. datetime(\"2022-10-05T21:05:12Z\"))\n| where ThreatTypes has \"Phish\"\n| where EmailActionPolicy != \"Anti-phishing user impersonation\""}
{"context": "Show DeviceEvents related to service installation where commandline contains fraps, download, and zfiles for the past week.", "baseline": "DeviceEvents \n| where Timestamp > ago(7d)\n| where ActionType == 'ServiceInstalled' \n| where InitiatingProcessCommandLine has_all (\"fraps\", \"download\", \"zfile\")"}
{"context": "Give registry event details where the registry key has Brunnen_Crop_H420 and the initiating process is not \"outlook.exe\" ", "baseline": "DeviceRegistryEvents\n| where RegistryKey has \"Brunnen_Crop_H420\"\n| where InitiatingProcessFileName != \"outlook.exe\""}
{"context": "Show Device process Events of past week for downloads where command line contains \"wannacrab\", \"cyanite\" or \"bluedog\" ", "baseline": "DeviceProcessEvents\n| where Timestamp > ago(7d)\n| where ProcessCommandLine contains \"Download\"\n| where ProcessCommandLine has_any (\"wannacrab\", \"cyanite\", \"bluedog\")"}
{"context": "show events details of past week where file name has rundll32.exe and command line matches the regex \"[A-Za-z]+_666\" ", "baseline": "DeviceProcessEvents \n| where Timestamp > ago(7d) \n| where FileName has 'rundll32.exe' \n| where ProcessCommandLine matches regex \"[a-zA-Z]+_666\"  "}
{"context": "Show up to 10000 device file events after 16:00 on 2022-09-08 that were not initiated by certutil.exe and where the commandline has '-urlcache', 'split', and 'http' ", "baseline": "DeviceFileEvents\n| where Timestamp between (datetime(\"2022-09-08T16:00:00Z\") .. datetime(\"2022-09-09T00:00:00Z\"))\n| where InitiatingProcessFileName !~ 'certutil.exe'\n| where InitiatingProcessCommandLine has_all(\"-urlcache\", \"split\", \"http\") \n| top 10000 by Timestamp asc"}
{"context": "Get file details of past 7 days for the file name \"Frps.exe', 'frpc.exe', 'Audio.exe' and 'arpful.exe' ", "baseline": "DeviceFileEvents\n| where Timestamp > ago(7d)\n| where FileName in~ (\"Frps.exe\", \"frpc.exe\", \"Audio.exe\", \"arpful.exe\")\n"}
{"context": "Show 9 file events for device id 'abc125bacf41'  where filename includes \"explorer.exe\" ", "baseline": "DeviceFileEvents\n| where DeviceId == 'abc125bacf41'\n| where FileName has 'explorer.exe'\n| limit 9"}
{"context": "Get devices with files that were received in email attachments sent by \"ContosoBro\" in the last 90 days ", "baseline": "EmailAttachmentInfo \n| where Timestamp  > ago(90d) \n| where SenderFromAddress == \"ContonsoBro\" \n| project SHA256 = tolower(SHA256)\n| join (      \nDeviceFileEvents     \n| where Timestamp > ago(90d)\n) on SHA256 \n| distinct DeviceName, SHA256, FileName, Timestamp, DeviceId, ReportId"}
{"context": "Show the last 101 devices and reports of file events whose SHA256 is among the top 256 hashes for files involved with alert bc15cb123312bc ", "baseline": "AlertEvidence \n| where AlertId == \"bc15cb123312bc\"\n| where EntityType == \"File\" \n| where isnotempty(SHA256)\n| summarize count() by SHA256 \n| top 256 by count_\n| project SHA256\n| join   DeviceFileEvents on SHA256\n| summarize by DeviceId,  ReportId, Timestamp, FileName, SHA256\n| top 101 by Timestamp desc"}
{"context": "Get a list of daily alert ids for alerts that involve \"BlueDog\" for all devices other than \"b81c712fdfd18d1\". ", "baseline": "AlertEvidence\n| where DeviceId != \"b81c712fdfd18d1\"\n| search \"BlueDog\"\n| summarize make_set(AlertId) by bin(Timestamp, 1d)"}
{"context": "Show all network events started from \"cmd.exe\" to \"bluedog.com\" or \"yellowdog.com\" between 2022-10-05T18:42:38Z UTC and 2022-10-05T21:05:12Z UTC  ", "baseline": "DeviceNetworkEvents\n| where Timestamp between ( datetime(\"2022-10-05T18:42:38Z\") .. datetime(\"2022-10-05T21:05:12Z\"))\n| where InitiatingProcessFileName == \"cmd.exe\"\n| where RemoteUrl has_any(\"bluedog.com\", \"yellowdog.com\")"}
{"context": "Display network connection requests (inbound and outbound) on port no 123  for IP \"10.20.30.40\" for the past week. ", "baseline": "DeviceNetworkEvents \n| where Timestamp > ago(7d) \n| where ActionType == \"ConnectionRequest\"\n| where RemotePort == 123\n| where RemoteIP == \"10.20.30.40\"  "}
{"context": "show me details of 100 device alert details for past 7 days", "baseline": "AlertEvidence\n| where Timestamp > ago(7d)\n| where EntityType == 'Machine' \n| limit 100"}
{"context": "Show first 10000 logon events details for timestamp between 2022-10-05 20:44 and 2022-10-05 20:49 ", "baseline": "DeviceLogonEvents\n| where Timestamp between (datetime(\"2022-10-05T20:44Z\") .. datetime(\"2022-10-05T20:49Z\"))\n| top 10000 by Timestamp asc"}
{"context": "Get devices that were active for past 7 days ", "baseline": "DeviceInfo\n| where Timestamp > ago(7d)"}
{"context": "show network info devices for past 7 days", "baseline": "DeviceNetworkInfo\n| where Timestamp > ago(7d)"}
{"context": "Give total device event count for past 7 days", "baseline": "DeviceEvents\n| where Timestamp > ago(7d)\n| count"}
{"context": "Number of devices with silverlight installed ", "baseline": "DeviceTvmSoftwareInventory\n| where SoftwareName == 'silverlight'\n| summarize dcount(DeviceId)"}
{"context": "Get file certificates timestamped for past 7 days", "baseline": "DeviceFileCertificateInfo\n| where Timestamp > ago(7d)"}
{"context": "show top 5k logon events details received on or after 2022-10-05 23:39 ", "baseline": "DeviceLogonEvents\n| where Timestamp >= datetime(\"2022-10-05T23:39Z\")\n| top 5000 by Timestamp asc"}
{"context": "Show Device VulnerabilitiesKB details where CvssScore is more than 9.5 and Cveld is CVE-2019-42000 ", "baseline": "DeviceTvmSoftwareVulnerabilitiesKB\n| where CvssScore > 9.5\n| where CveId == \"CVE-2019-42000\""}
{"context": "Display 100 alert evidence which contains bluedog or Invoke-Request  ", "baseline": "AlertEvidence\n| where * contains \"bluedog\" or * contains \"Invoke-Request\"\n| limit 100"}
{"context": "Show first 10000 url events received on or after 2022-10-06 at 01:55AM ", "baseline": "UrlClickEvents\n| where Timestamp >= datetime(\"2022-10-06T01:55:18Z\")\n| top 10000 by Timestamp asc"}
{"context": "Display email received between  2022-05-09 21:11 and 2022-10-06 01:01 sorted by timestamp ", "baseline": "EmailEvents\n| where Timestamp between(datetime(\"2022-05-09T21:11:26Z\") .. datetime(\"2022-10-06T01:01:00Z\"))\n| sort by Timestamp asc"}
{"context": "Summarize usb mount events by device, account, and file location ", "baseline": "DeviceEvents\n| where ActionType contains \"UsbDriveMount\"\n| summarize by FileName, FolderPath , DeviceName , AccountName"}
{"context": "Show first 10000 logon details received between 2022-10-06 01:39  to 2022-10-06 01:44 ", "baseline": "DeviceLogonEvents\n| where Timestamp between (datetime(\"2022-10-06T01:39Z\")..datetime(\"2022-10-06T01:44Z\"))\n| top 10000 by Timestamp asc"}
{"context": "Show 9 file events where deviceId is 5917254126bfc171adf12 and file name is \"C:\\Windows\\Temp\\contonso.exe\" ", "baseline": "DeviceFileEvents\n| where FileName == @\"C:\\Windows\\Temp\\contonso.exe\"\n| where DeviceId == \"5917254126bfc171adf12\"\n| limit 9"}
{"context": "Show earliest 10000 process events triggered between 2022-10-06 01:39  to 2022-10-06 01:44 ", "baseline": "DeviceProcessEvents\n| where Timestamp between (datetime(\"2022-10-06T01:39Z\")..datetime(\"2022-10-06T01:44Z\"))\n| top 10000 by Timestamp asc"}
{"context": "Display email events details for last 7 day ", "baseline": "EmailEvents\n| where Timestamp > ago(7d)"}
{"context": "Show 10000 Device events for last 7 day ", "baseline": "DeviceEvents\n| where Timestamp > ago(7d)\n| limit 10000"}
{"context": "get 10000 events for last 7 day where action type has ASR ", "baseline": "DeviceEvents\n| where Timestamp > ago(7d) \n| where ActionType contains 'ASR'\n| limit 10000"}
{"context": "Show 100 email records whose subject contains \"account\" or were sent from a 'contso.com' email ", "baseline": "EmailEvents\n| where (Subject contains \"account\" or SenderFromDomain == \"contso.com\")\n| limit 100"}
{"context": "network events where device name contains attack-test or chris-test and remote Url is not empty ", "baseline": "DeviceNetworkEvents\n|  where DeviceName has_any (\"attack-test\", \"chris-test\") \n| where isnotempty(RemoteUrl)"}
{"context": "Show DLL events where folderpath starts with contonso  ", "baseline": "DeviceImageLoadEvents\n| where FolderPath startswith \"contonso\"  "}
{"context": "show all info for vulnerabilities on devices 48121bc1fd111112fd1 and fbadc8121bc1fd111112fd1 ", "baseline": "DeviceTvmSoftwareVulnerabilities\n| where DeviceId in (\"48121bc1fd111112fd1\", \"fbadc8121bc1fd111112fd1\")\n| join kind = leftouter DeviceTvmSoftwareVulnerabilitiesKB on CveId"}
{"context": "Get the number of devices running Windows Server 19111.1234 or 20200.1010 in the past 30 days. ", "baseline": "DeviceTvmSoftwareInventory\n| join DeviceInfo on DeviceId\n| where Timestamp > ago(30d)\n| where OSPlatform hasprefix 'WindowsServer'\n| where OSVersion has_any('19111.1234','20200.1010')\n| summarize dcount(DeviceId)"}
{"context": "Show email url details where threat type is either Ransomdrop or Action Policy is sharepoint attachment for the last 10 days  ", "baseline": "EmailEvents\n| where Timestamp > ago(10d)\n| where ThreatTypes contains \"Ransomdrop\"\n  or EmailActionPolicy == \"SharePoint Attachment\"\n| join kind=rightsemi EmailUrlInfo on NetworkMessageId"}
{"context": "Get attachments and post-delivery events for all email threats ", "baseline": "union EmailEvents, EmailAttachmentInfo, EmailPostDeliveryEvents\n| where isnotempty(ThreatTypes)\n| distinct ThreatTypes"}
{"context": "Show all device events received 5 days ago where registrykey contains Contonsokey   ", "baseline": "DeviceRegistryEvents\n| where Timestamp > ago(5d)\n| where RegistryKey contains \"ContonsoKey\""}
{"context": "show the first 100 failed network connections ingested after 2022-10-06 01:58 for RemoteIP 12.34.9.41, 12.34.8.41 wherethe SHA256 of the process is not 581920651205971297109265102bafdc or 591279bfcadf1285912  ", "baseline": "DeviceNetworkEvents\n| where Timestamp > datetime(\"2022-10-06T01:58Z\")\n| where ActionType == \"ConnectionFailed\"\n| where RemoteIP in (\"12.34.9.41\", \"12.34.8.41\")\n| where InitiatingProcessSHA256 !in (\"581920651205971297109265102bafdc\", \"591279bfcadf1285912\")\n| top 100 by Timestamp asc"}
{"context": "Show additional event details for all antivirus detections ", "baseline": "DeviceEvents\n| where ActionType == \"AntivirusDetection\"\n| extend EventDetails=parse_json(AdditionalFields)\n| evaluate bag_unpack(EventDetails)"}
{"context": "Show the most recent OS version and architecture for windows devices  ", "baseline": "DeviceInfo\n| where OSPlatform contains \"Windows\"\n| summarize arg_max(Timestamp, OSVersion, OSArchitecture) by DeviceId"}
{"context": "Up to 10 process event records created between 2022-10-05 23:31 and 2022-10-06 03:31 where SHA256 has 49102581962381962bfdafda on device id 31256819272fb1afd  ", "baseline": "DeviceProcessEvents\n| where ProcessCreationTime between ( datetime(\"2022-10-05T23:31Z\") .. datetime(\"2022-10-06T03:31\") )\n| where DeviceId == \"31256819272fb1afd\"\n| where SHA256 has \"49102581962381962bfdafda\"\n| limit 10"}
{"context": "Display 10 HTTP requests from chrome on device 284f1b25b12bb7b76b5b43 ", "baseline": "DeviceNetworkEvents\n| where InitiatingProcessFileName startswith \"chrome\"\n| where Protocol == \"http\"\n| where DeviceId == '284f1b25b12bb7b76b5b43'\n| limit 10"}
{"context": "Display subscription Ids for last 10 days where report Id is 512bacfad125 ", "baseline": "CloudAppEvents\n| where Timestamp > ago(10d) \n| where ReportId == \"512bacfad125\"\n| project subscriptionId = tostring(RawEventData.subscriptionId)"}
{"context": "Show first inbound connection for private remote IPs on local port  123,345, or 5959  received on 2022-10-06 ", "baseline": "DeviceNetworkEvents\n| where Timestamp between (datetime(\"2022-10-06\") .. 1d)\n| where ActionType == \"InboundConnectionAccepted\"\n| where LocalPort in (123, 345, 5959)\n| where RemoteIPType == \"Private\"\n| summarize arg_min(Timestamp, *) by RemoteIP"}
{"context": "Give me 100 device information and evidence details for high-severity alerts between 2022-10-06 01:54 and 2022-10-06 01:59 for non-ransomware events.", "baseline": "AlertInfo\n| where Timestamp between (datetime(\"2022-10-06T01:54Z\") .. datetime(\"2022-10-06T01:59Z\"))\n| where Severity == \"High\"\n| where Category != \"Ransomware\"\n| join kind=leftouter AlertEvidence on AlertId\n| join kind=leftouter DeviceInfo on DeviceId \n| limit 100"}
{"context": "Show image load events where filename ends with \".cert\" excluding processes 'cmd.exe' 'dotnet.exe' ", "baseline": "DeviceImageLoadEvents\n| where FileName endswith \".cert\"\n| where InitiatingProcessFileName !in~ ('cmd.exe', 'dotnet.exe')"}
{"context": "Show 100000 email records for last 7 days that weren't outbound and the recipient address doesn't ends with '@contonso.com' ", "baseline": "EmailEvents\n| where Timestamp > ago(7d)\n|where EmailDirection != 'Outbound'\n|where RecipientEmailAddress !endswith '@contonso.com'\n| limit 100000"}
{"context": "Show the count of all rows for DeviceName, VulnerabilitySeverityLevel and MachineGroups where device name doesn't contain \"simulation-machine\" for low to medium severity levels ", "baseline": "DeviceTvmSoftwareVulnerabilities\n| where VulnerabilitySeverityLevel in~ (\"Low\", \"Medium\")\n| where DeviceName !~ \"simulation-machine\"\n| join DeviceInfo on DeviceId\n| summarize count() by DeviceName, VulnerabilitySeverityLevel, MachineGroup"}
{"context": "show device configuration asssement for applicable, not complaint devices with id 1bc1fd126f61926812491234 in the last 24 days ", "baseline": "DeviceTvmSecureConfigurationAssessment\n| where Timestamp > ago(24d)\n| where DeviceId == \"1bc1fd126f61926812491234\"\n| where IsApplicable == 1\n| where IsCompliant == 0"}
{"context": "Count number usb mount events in the last 7 days ", "baseline": "DeviceEvents\n| where Timestamp > ago(7d)\n| where ActionType contains 'UsbDriveMount'\n| count"}
{"context": "Show all device ids used to logons into account 519285bdf10295812 via AAD in the last 7 days ", "baseline": "AADSignInEventsBeta\n| where Timestamp >= ago(7d)\n| where AccountObjectId == \"519285bdf10295812\"\n| join DeviceInfo on DeviceName\n| distinct DeviceId"}
{"context": "Parse and show all types of attack techniques seen in AlertId 58102171bdfcad141 ", "baseline": "AlertInfo\n| where AlertId == \"ad3ee9f91f86e4f7609574eb80caa286b220bba70a\"\n| mv-expand parse_json(AttackTechniques)\n| project AttackTechniques"}
{"context": "give info for all alerts starting with newest ", "baseline": "AlertInfo\n| order by Timestamp desc"}
{"context": "Display all event details in the last 7 days", "baseline": "DeviceEvents\n| where Timestamp > ago(7d)"}
{"context": "Display logon alert details in the last 7 days ", "baseline": "DeviceLogonEvents\n| where Timestamp > ago(7d)"}
{"context": "Get Device processes in the last 7 days", "baseline": "DeviceProcessEvents\n| where Timestamp > ago(7d)"}
{"context": "display registry event details for timestamp in last 7 days", "baseline": "DeviceRegistryEvents\n| where Timestamp > ago(7d)"}
{"context": "Get single network event received after 2022-10-06 01:58 ", "baseline": "DeviceNetworkEvents\n| where Timestamp > datetime(\"2022-10-06T01:58Z\")\n| limit 1"}
{"context": "Get time, device, and report id for one device file event example ", "baseline": "DeviceFileEvents\n| limit 1\n| project Timestamp, DeviceId, ReportId"}
{"context": "Count number of firewall device events for the last 7 days ", "baseline": "DeviceEvents\n| where Timestamp > ago(7d) \n| where ActionType contains 'Firewall'\n| count"}
{"context": "Display the most recent 50000 network events received on or after 2022-10-06 01:45 ", "baseline": "DeviceNetworkEvents\n| where Timestamp >= datetime(\"2022-10-06T01:45Z\")\n| top 5000 by Timestamp asc"}
{"context": "show latest 5000 event process events after 2022-10-06 01:36 ", "baseline": "DeviceProcessEvents\n| where Timestamp >= datetime(\"2022-10-06T01:36Z\")\n| top 5000 by Timestamp asc"}
{"context": "Get first 5000 registry events received on or after 2022-10-06 01:28 ", "baseline": "DeviceRegistryEvents\n| where Timestamp >= datetime(\"2022-10-06T01:28Z\")\n| top 5000 by Timestamp asc"}
{"context": "List time of last file event for each device in the last 14 days ", "baseline": "DeviceFileEvents\n| where Timestamp > ago(14d)\n| summarize arg_max(Timestamp, *) by DeviceId"}
{"context": "Get one cloud app event example and display timestamp, reportid and non empty accountobject id ", "baseline": "CloudAppEvents\n| where isnotempty(AccountObjectId)\n| limit 1\n| project Timestamp, ReportId, AccountObjectId"}
{"context": "Dislay 10000 url related event triggered from 2022-10-06 01:55 to 2022-10-06 01:58 ", "baseline": "UrlClickEvents\n| where Timestamp between(datetime(\"2022-10-06T01:55Z\")..datetime(\"2022-10-06T01:58Z\"))\n| limit  10000"}
{"context": "Sort device info by timestamp and return 10000 samples between 2022-10-06 01:39 and 2022-10-06 01:44 ", "baseline": "DeviceInfo\n| where Timestamp between (datetime(\"2022-10-06T01:39Z\")..datetime(\"2022-10-06T01:44Z\"))\n| sort by Timestamp asc\n| limit 10000"}
{"context": "display first 10000 device file event details received between 2022-10-06 01:39 and 2022-10-06 01:44 ", "baseline": "DeviceFileEvents\n| where Timestamp between (datetime(\"2022-10-06T01:39Z\") .. datetime(\"2022-10-06T01:44Z\"))\n| top 10000 by Timestamp asc"}
{"context": "List 10000 most recent network info samples between 2022-10-06 01:39 and 2022-10-06 01:44 ", "baseline": "DeviceNetworkInfo\n| where Timestamp between (datetime(\"2022-10-06T01:39Z\") .. datetime(\"2022-10-06T01:44Z\"))\n| top 10000 by Timestamp asc"}
{"context": "Show 10000 oldest network connection details events between 2022-10-06 01:39 and 2022-10-06 01:44 ", "baseline": "DeviceNetworkEvents\n| where Timestamp between (datetime(\"2022-10-06T01:39Z\") .. datetime(\"2022-10-06T01:44Z\"))\n| top 10000 by Timestamp asc"}
{"context": "Show first 10000 device image load events triggerred between 2022-10-06 01:39 and 2022-10-06 01:44 ", "baseline": "DeviceImageLoadEvents\n| where Timestamp between (datetime(\"2022-10-06T01:39Z\") .. datetime(\"2022-10-06T01:44Z\"))\n| top 10000 by Timestamp asc"}
{"context": "List initial 10000 file certificate samples between 2022-10-06 01:39 and 2022-10-06 01:44 ", "baseline": "DeviceFileCertificateInfo\n| where Timestamp between (datetime(\"2022-10-06T01:39Z\") .. datetime(\"2022-10-06T01:44Z\"))\n| top 10000 by Timestamp asc"}
{"context": "Group all file events that contain SHA1 info by filename and get list of devices ids that reference the file and the event time range ", "baseline": "DeviceFileEvents\n| where SHA1 <> \"\"\n| summarize count(), makeset(DeviceName), First=min(Timestamp), Last=max(Timestamp) by FileName, SHA1, SHA256, MD5"}
{"context": "Show images named \"'rpc5623653fbd-542542-dbcaffd\" that were loaded on device fbee256526526526aabcd76363 during the last 20 days ", "baseline": "DeviceImageLoadEvents\n| where Timestamp >= ago(20d)\n| where DeviceId == 'fbee256526526526aabcd76363'\n| where FileName contains 'rpc5623653fbd-542542-dbcaffd'"}
{"context": "Get servere vulnerabilities details for Device ID '65265167876878763267845fbd' ", "baseline": "DeviceTvmSoftwareVulnerabilities\n| where DeviceId == \"65265167876878763267845fbd\"\n| where VulnerabilitySeverityLevel == \"Severe\""}
{"context": "Spam emails delivered between 2022-10-06 01:39 and 2022-10-06 01:59 that were not flagged as junk ", "baseline": "EmailEvents\n| where Timestamp between ( datetime(\"2022-10-06T01:39Z\") .. datetime(\"2022-10-06T01:59Z\"))\n| where DeliveryAction == \"Delivered\"\n| where ThreatTypes has \"Spam\""}
{"context": "show me 100 device events that containing PowerShellCommand and \"419afbfed1111\" from 03/08/2024 to 03/09/2024", "baseline": "DeviceEvents\n| where Timestamp between(datetime(\"03/08/2024\") .. datetime(\"03/09/2024\"))\n| where * contains \"419afbfed1111\" \n| where * contains \"PowerShellCommand\"\n| limit 100"}
{"context": "display 100 device registry events which contain \"bluedog\" that occurred between 03/08/2024 and 03/09/2024.", "baseline": "DeviceRegistryEvents\n| where * contains \"bluedog\"\n| where Timestamp between(datetime(\"03/08/2024\") .. datetime(\"03/09/2024\"))\n| limit 100"}
{"context": "Display last 7 days of email events received by contonso.com addresses and not from msfn.com or microsoft.com ", "baseline": "EmailEvents\n| where Timestamp > ago(7d) \n| where RecipientEmailAddress endswith \"contonso.com\"\n| where SenderFromDomain !in ('msfn.com', 'microsoft.com')"}
{"context": "Show powershell commands that opened a process in the last 5 days ", "baseline": "DeviceEvents\n| where Timestamp>=ago(5d)\n| where InitiatingProcessFileName =~ 'powershell.exe'\n| where ActionType == 'OpenProcessApiCall' "}
{"context": "Get process with id 13131 on devices named 'lizzie', created at 2022-10-04T23:14:14.9241978 UTC ", "baseline": "DeviceProcessEvents\n| where DeviceName == 'lizzie'\n| where ProcessId  == 13131\n| where ProcessCreationTime == datetime('2022-10-04T23:14:14.9241978Z')"}
{"context": "get details of obs.exe and audiomanager.exe files for the last 7 days ", "baseline": "DeviceFileEvents\n| where Timestamp > ago(7d)\n| where FileName in ('obs.exe', 'audiomanager.exe')\n"}
{"context": "Give 10 event details triggerred between 2022-10-05 23:42 and 2022-10-06 03:42:33 for Device ID '12456790843bfad838fbfbe' and where MD5 equals '563651253bfda673'  ", "baseline": "DeviceFileEvents\n| where Timestamp between (datetime('2022-10-05T23:42Z') .. datetime('2022-10-06T03:42:33Z'))\n| where DeviceId == '12456790843bfad838fbffbe'\n| where MD5 == '563651253bfda673'\n| limit 10"}
{"context": "Group unknown logons events from accounts that start with 'contro.son' between  10/04/2022 and 10/05/2022  by timestamp, account name and logon type  ", "baseline": "DeviceLogonEvents\n| where Timestamp between (datetime('10/04/2022') .. datetime('10/05/2022'))\n| where LogonType == 'Unknown'\n| where  AccountName startswith 'contro.son' \n| summarize by Timestamp, AccountName, LogonType"}
{"context": "Get network events initiated by installer.msi where url contains contonso.com or filedrop between 2022-10-05 18:42 and 2022-10-06 1:59  ", "baseline": "DeviceNetworkEvents\n| where Timestamp between (datetime(\"2022-10-05T18:42Z\") .. datetime(\"2022-10-06T01:59Z\"))\n| where InitiatingProcessFileName == \"installer.msi\"\n| where RemoteUrl contains \"contonso.com\" or RemoteUrl contains \"filedrop\""}
{"context": "Show all registry key that start with \"HKEY_LOCAL_MACHINE\\\\bluedog\" or \"HKEY_LOCAL_MACHINE\\\\dog\"  added during the last 5 days ", "baseline": "DeviceRegistryEvents\n| where Timestamp >= ago(5d)\n| where ActionType == \"RegistryKeyCreated\"\n| where RegistryKey startswith \"HKEY_LOCAL_MACHINE\\\\bluedog\" or RegistryKey startswith \"HKEY_LOCAL_MACHINE\\\\dog\""}
{"context": "give details of unknown logons from IP \"10.20.30.40\" over UDP excluding @contonso.com accounts ", "baseline": "DeviceLogonEvents\n|where Protocol == \"Udp\"\n| where LogonType == \"Unknown\"\n| where AccountDomain != \"contonso.com\""}
{"context": "Find email attachments from known senders or from spam emails ingested in the last 10 days ", "baseline": "EmailEvents\n| where Timestamp >= ago(10d)\n| where ThreatTypes contains \"Spam\"\n| join kind=rightsemi EmailAttachmentInfo on NetworkMessageId"}
{"context": "Make a list of device ids that last connected from ip address \"89.12.55.1\" for the last 7 days ", "baseline": "DeviceNetworkEvents\n| where Timestamp >= ago(7d)\n| where ActionType == 'ConnectionSuccess' \n| summarize arg_max(Timestamp, LocalIP) by DeviceId\n| where LocalIP == \"89.12.55.1\"\n| project DeviceId"}
{"context": "Get device details for the past 30 days where deviceId is either '12412312bf1fb1fb12' or '878ad87ad78add12412' and IP address is '192.168.1.1' ", "baseline": "DeviceInfo\n| where Timestamp >= ago(30d)\n| where PublicIP == '192.168.1.1'\n| where DeviceId in ('12412312bf1fb1fb12', '878ad87ad78add12412')"}
{"context": "Show timeseries of filepaths with more than 1 event requested by installer.msi over FTP protocol", "baseline": "let folder_names = DeviceFileEvents\n| where RequestProtocol =~ \"FTP\"\n| where InitiatingProcessFileName has \"installer.msi\"\n| summarize count() by FolderPath\n| where count_ > 1\n| distinct FolderPath;\nDeviceFileEvents\n| where RequestProtocol =~ \"FTP\"\n| where InitiatingProcessFileName has \"installer.msi\"\n| where FolderPath in (folder_names)\n| make-series num=count() default=0 on Timestamp step 5m by FolderPath\n| extend (baseline, seasonal, trend, residual) = series_decompose(num, -1, 'linefit') "}
{"context": "Contoso corp machines that were active in the past 7d and had a registry event in the last 30 days ", "baseline": "DeviceInfo\n| where Timestamp > ago(7d)\n| where MachineGroup has \"ContonsoCorp\"\n| distinct DeviceId\n| join DeviceRegistryEvents on DeviceId\n| where Timestamp > ago(30d)"}
{"context": "Get events for installer.msi where folderpath ends with \"ambigublue\" exlcuding processes originally named powershell.exe ", "baseline": "DeviceFileEvents\n| where FileName =~ \"installer.msi\"  \n| where FolderPath endswith \"ambigublue\"\n| where InitiatingProcessVersionInfoOriginalFileName <> \"powershell.exe\""}
{"context": "Show device ids and set of destination IPs for reoccuring high integrity network events on port 3131 that were initated by cmd.exe or powershell.exe ", "baseline": "DeviceNetworkEvents\n| where InitiatingProcessFileName in~ ('cmd.exe','powershell.exe')\n| where RemotePort == 3131\n| where InitiatingProcessIntegrityLevel in ('System','High')\n| summarize dcount(RemoteIP),  make_set(RemoteIP) by DeviceId\n| where dcount_RemoteIP >= 2"}
{"context": "show device image load events where php.exe command contains bluedog ", "baseline": "DeviceImageLoadEvents\n| where InitiatingProcessFileName == \"php.exe\"\n| where InitiatingProcessCommandLine has \"bluedog\""}
{"context": "Processes originally called \"powershell.exe\"  that were run in the last 5 days and have both \"-rpc\" and \"/$1k|\" in their command line ", "baseline": "DeviceProcessEvents\n| where Timestamp > ago(5d)\n| where ProcessVersionInfoOriginalFileName =~ \"powershell.exe\"\n| where ProcessCommandLine has_all( \"-rpc\", \"/$1k|\")"}
{"context": "Processes with multiple arguments that were run in the last 5 days on devices in the contoso machine group", "baseline": "let ContosoDevices = DeviceInfo\n| where MachineGroup has \"Contoso\"\n| distinct DeviceId;\nDeviceProcessEvents\n| where Timestamp > ago(5d)\n| where DeviceId in (ContosoDevices)\n| where (array_length(parse_command_line(ProcessCommandLine, \"windows\")) > 1)"}
{"context": "Show last file event grouped by DeviceName and DeviceId for non compliant devices in the last 7 days ", "baseline": "DeviceFileEvents\n| where Timestamp > ago(7d)\n| join kind=leftsemi (\n    DeviceTvmSecureConfigurationAssessment\n    | where Timestamp > ago(7d)\n    | where not(IsCompliant)\n) on DeviceId\n| summarize argmax(Timestamp, *) by DeviceName, DeviceId;"}
{"context": "Show first event and total number of networkmessages for delivered emails grouped by sender address and where messageid is equal to \"1257824-fbdeded-5123\" ", "baseline": "EmailEvents\n| where DeliveryAction == \"Delivered\"\n| where NetworkMessageId has \"1257824-fbdeded-5123\"\n| summarize arg_min(Timestamp, *), dcount(NetworkMessageId) by SenderMailFromAddress"}
{"context": "Get timestamp, device and report id for svchost and outlook process events that include cmd.exe, beacon or blue in the command line and have high or system ingerity level ", "baseline": "DeviceProcessEvents\n| where InitiatingProcessParentFileName has_any ('svchost', 'outlook')\n| where  ProcessIntegrityLevel in  ('High','System')\n| where  ProcessCommandLine has_all ('cmd.exe','beacon','blue')\n| project Timestamp, DeviceId, ReportId"}
{"context": "Show unknown device logon events where commandline includes cmd.exe, beacon and blue for the last 5 days ", "baseline": "DeviceLogonEvents\n| where Timestamp >= ago(5d)\n| where InitiatingProcessCommandLine has_all('cmd.exe','beacon','blue')\n| where LogonType == \"Unknown\""}
{"context": "Get all process events that reference a windows or linux folderpath for the last 5 days and add platform label called FolderType ", "baseline": "DeviceInfo\n| where OSPlatform has_any(\"Windows\", \"Linux\")\n| project DeviceId, OSPlatform\n| join DeviceProcessEvents on DeviceId\n| where Timestamp > ago(5d)\n| extend FolderType=iff(OSPlatform == \"Linux\", \"Linux\", \"Windows\")\n"}
{"context": "Show the top 101 device  events for machines associated with the alert 171bafd2531 plus minus 3 hours of 2022-10-06 00:32:15 ", "baseline": "AlertEvidence\n| where AlertId == \"171bafd2531\"\n| distinct DeviceId\n| join DeviceEvents on DeviceId\n| where Timestamp between ((datetime(\"2022-10-06T00:32:15\") - 3h) .. 6h)\n| top 101 by Timestamp desc"}
{"context": "Show image load events for files ending in \"crypto.dll\" initiated by powershell and files ending in \"crypto.msi\" that were accessed for the first time in 24hrs. ", "baseline": "union (\n    DeviceImageLoadEvents\n    | where FileName endswith \"crypto.dll\"\n       | where InitiatingProcessCommandLine contains \"powershell\"\n), (\n    DeviceFileEvents \n    | where FileName endswith \"crypto.msi\"\n    | summarize argmin(Timestamp, *) by FileName, SHA256, SHA1, bin(Timestamp, 1d)\n )"}
{"context": "Show 101 most recent registry events  within 5 hours before or after 2022-10-05 23:19:26, involving keys containing \"HKEY\\\\CCconfig\" on up to 50 compute clusters receiving the alert \"51892fbaf6afaa\" ", "baseline": "DeviceRegistryEvents\n| where Timestamp between ((datetime(\"2022-10-05T23:19:26\") - 5h) ..  10h)\n| where RegistryKey contains \"HKEY\\\\CCconfig\"\n| join (\n    AlertEvidence\n    | where AlertId == \"51892fbaf6afaa\"\n    | where EntityType =~ \"Machine\"\n    | distinct DeviceId\n    | take 50\n) on DeviceId\n| top 101 by Timestamp desc "}
{"context": "Show all user and device info for iOS devices that have high severity vulnerabilities and a cvs score higher or equal to 9 ", "baseline": "DeviceInfo\n| where OSPlatform contains \"iOS\"\n| mv-expand User=parse_json(LoggedOnUsers)\n| evaluate bag_unpack(User, \"User\")\n| join DeviceTvmSoftwareVulnerabilities on DeviceId\n| join DeviceTvmSoftwareVulnerabilitiesKB on CveId\n| where VulnerabilitySeverityLevel contains \"High\"\n| where CvssScore >= 9"}
{"context": "Get devices that logged on which have recommended security updates for \"outlook.exe\" ", "baseline": "DeviceTvmSoftwareVulnerabilities\n| where SoftwareName has \"outlook\"\n| where isnotempty(RecommendedSecurityUpdate)\n| join (\n    DeviceLogonEvents \n| where ActionType == \"LogonSuccess\"\n) on DeviceId"}
{"context": "Show 101 latest powershell commands that contain \"command\" or \"url\" for device \"419afbfed1111\" grouped by device and report id ", "baseline": "DeviceEvents\n| where DeviceId == \"419afbfed1111\"\n| where  ActionType == \"PowerShellCommand\"\n| where AdditionalFields has_any(\"Command\", \"Url\")\n| extend PowershellDetails = iif(AdditionalFields has \"Command\", parse_json(AdditionalFields).Command, parse_json(AdditionalFields).Url)\n| top 101 by Timestamp desc\n| summarize make_set(PowershellDetails) by DeviceId, DeviceName, ReportId"}
{"context": "show devices and account names that made a Open process api call through file2.txt, along with details of the initiating process.", "baseline": "DeviceEvents\n| where ActionType == \"OpenProcessApiCall\" and FileName =~ \"file2.txt\" \n| project DeviceName, AccountName, InitiatingProcessFileName, InitiatingProcessFolderPath, InitiatingProcessCommandLine, InitiatingProcessMD5"}
{"context": "show alert info for id 9983712fbafd12f412f4 ", "baseline": "AlertInfo\n| where AlertId == \"9983712fbafd12f412f4\""}
{"context": "Authentication events for accounts containing \"humon\" or \"alig\" ", "baseline": "IdentityLogonEvents\n| where AccountName has_any (\"humon\", \"alig\")"}
{"context": "Give total number of alerts for low severity", "baseline": "AlertInfo\n| where Severity == 'Low'\n| count"}
{"context": "Find use of net.exe to send SAMR queries to Active Directory", "baseline": "IdentityQueryEvents\n| where ActionType =~ \"SAMR query\" \n| extend QueryTime = Timestamp\n| extend TimeWindow = bin(QueryTime, 5m)\n| join kind=inner (\nDeviceProcessEvents \n| where InitiatingProcessCommandLine contains \"net.exe\"\n| extend ProcessCreationTime = Timestamp\n| extend TimeWindow = bin(ProcessCreationTime, 5m)\n    ) on DeviceName, TimeWindow\n| where ProcessCreationTime - QueryTime between (-2m .. 2m)"}
{"context": "List authentication events by members of the local administrator group or the built-in administrator account", "baseline": "DeviceLogonEvents\n| where  IsLocalAdmin == '1' "}
{"context": "Get the number of alerts by MITRE ATT&CK technique", "baseline": "AlertInfo\n| mv-expand todynamic(AttackTechniques) to typeof(string)\n| where isnotempty(AttackTechniques)\n| summarize dcount(AlertId) by AttackTechniques"}
{"context": "Get the number of alerts by severity", "baseline": "AlertInfo\n| summarize dcount(AlertId) by Severity"}
{"context": "List all alerts involving a user with account \"S-1-21-2-13412342-129349124-12785134\"", "baseline": "AlertEvidence\n| where AccountSid =~ \"S-1-21-2-13412342-129349124-12785134\"\n| where EntityType =~ \"User\"\n| distinct AlertId\n| join AlertInfo on AlertId"}
{"context": "List all alerts involving devices named \"desktop-132\"", "baseline": "AlertEvidence\n| where DeviceName has \"desktop-132\"\n| join kind = inner AlertInfo on AlertId"}
{"context": "Get antivirus scan events, including completed and cancelled scans on device \"16352fa21f135\"", "baseline": "DeviceEvents \n| where ActionType startswith \"AntivirusScan\" \n| where DeviceId == \"16352fa21f135\""}
{"context": "Check '35cc086a8bb43808f9586ee890b04a64726a60d6' for the services set to automatically start with Windows", "baseline": "DeviceRegistryEvents\n| where DeviceId == \"35cc086a8bb43808f9586ee890b04a64726a60d6\"\n| where ActionType == \"RegistryValueSet\"\n| where RegistryKey matches regex @\"HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\.*\\\\Services\\\\.*\"  \n| where RegistryValueName == \"Start\" \n| where RegistryValueData == \"2\""}
{"context": "Check process command lines for attempts to clear event logs", "baseline": "DeviceProcessEvents \n| where (\n    InitiatingProcessCommandLine contains \"wevtutil\" \n    and InitiatingProcessCommandLine has_any(\"uninstall-manifest\", \"cl\")\n) or ( \n    InitiatingProcessCommandLine contains \"Clear-EventLog\" \n) or ( \n    InitiatingProcessCommandLine has_all(\"wmic\", \"cleareventlog\")\n) or (\n    InitiatingProcessCommandLine has_all(\"del\", \"Log\")\n)"}
{"context": "Track when files with hash a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0 have been copied or moved ", "baseline": "DeviceFileEvents\n| where SHA1 =~ \"a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0\"\n| where ActionType =~ 'FileCreated'"}
{"context": "List all devices that have been assigned IP address 192.168.1.5", "baseline": "DeviceNetworkInfo\n| mv-expand parse_json(IPAddresses)\n| extend IPAddress = IPAddresses.IPAddress\n| where IPAddress == \"192.168.30.1\"\n| summarize by DeviceId, DeviceName"}
{"context": "List devices running operating systems older than Windows 10", "baseline": "DeviceInfo\n| where OSPlatform startswith \"Windows\"\n| where DeviceType != \"Server\"\n| where toint(OSVersion) < 10"}
{"context": "Get the list of devices where certain Microsoft Defender ATP capabilities, such as real-time protection, have been turned off", "baseline": "//Detecting disabling of Defender:\nDeviceRegistryEvents\n| where RegistryKey has @\"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Defender\" \n| where RegistryValueName has_any(\n    \"DisableRealtimeProtection\",\n    \"DisableRealtimeMonitoring\", \n    \"DisableBehaviorMonitoring\", \n    \"DisableIOAVProtection\", \n    \"DisableScriptScanning\", \n    \"DisableBlockAtFirstSeen\"\n)\n| where RegistryValueData has \"1\" \n| where isnotempty(PreviousRegistryValueData)"}
{"context": "List all email messages with attachments that were sent to external domains", "baseline": "EmailEvents\n| where EmailDirection == \"Outbound\" \n| where AttachmentCount > 0\n| where RecipientEmailAddress !endswith SenderFromDomain"}
{"context": "List all email messages found containing malware", "baseline": "EmailEvents\n| where ThreatTypes has \"Malware\""}
{"context": "Count events involving \"cmd.exe\" at 30 minute intervals to track changes in level of activity related to that file and make a line chart", "baseline": "DeviceProcessEvents\n| where FileName == \"cmd.exe\"\n| summarize count() by bin(Timestamp, 30m)\n| render linechart "}
{"context": "Find cloud app activity renaming .docx files to .doc on devices", "baseline": "CloudAppEvents\n| where ActionType =~ \"FileRenamed\"\n| where tostring(RawEventData.DlpOriginalFilePath) endswith \".docx\"\n| where tostring(RawEventData.TargetFilePath) endswith \".doc\""}
{"context": "Find the appearance of files sent by \"john@contoso.com\" on devices in the network", "baseline": "EmailAttachmentInfo\n| where SenderFromAddress =~ \"john@contoso.com\"\n| distinct SHA256\n| join DeviceFileEvents on SHA256 \n| summarize arg_min(Timestamp, *) by SHA256"}
{"context": "Find files with Elliptic Curve Cryptography (ECC) certificates showing Microsoft as the root signer but the incorrect signer name", "baseline": "DeviceFileCertificateInfo\n| where IsRootSignerMicrosoft\n| where SignatureType =~ \"Embedded\"\n| where Signer != \"Microsoft Corporation\""}
{"context": "Get detailed processing information up until post-delivery of an email with \"reset PW\" subject from \"help@macrosoft.com\"", "baseline": "EmailEvents\n| where SenderFromAddress == \"help@macrosoft.com\" \n| where Subject == \"reset PW\"\n| join EmailPostDeliveryEvents on NetworkMessageId, RecipientEmailAddress"}
{"context": "List membership changes made to \"Contoso Server Group\"", "baseline": "IdentityDirectoryEvents\n| where ActionType =~  'Group Membership changed'\n| where AdditionalFields['TO.GROUP'] =~ \"Constoso Server Group\"\n     or AdditionalFields['FROM.GROUP'] =~ \"Constoso Server Group\""}
{"context": "List users that have logged on to 6e92ca71aeef6170505ce2f4b869b0847d05be05 from 2022-4-19 to 2022-5-4", "baseline": "DeviceLogonEvents\n| where DeviceId == '6e92ca71aeef6170505ce2f4b869b0847d05be05'\n| where ActionType == 'LogonSuccess'\n| where Timestamp between ( datetime(2022-04-19) .. datetime(2022-05-04) )\n| distinct AccountName, AccountSid, AccountDomain"}
{"context": "Get the 10 latest logons performed by accounts within 30 minutes of receiving a known malicious email.", "baseline": "EmailEvents \n| where ThreatTypes has \"Malware\"\n| distinct RecipientObjectId, Timestamp\n| join IdentityLogonEvents on $left.RecipientObjectId == $right.AccountObjectId\n| where Timestamp1 - Timestamp between (0m .. 30m)\n| top 10 by Timestamp1 desc"}
{"context": "Get the number of phishing emails from the top ten sender domains", "baseline": "EmailEvents\n| where ThreatTypes has \"Phish\"\n| summarize count() by SenderFromDomain\n| top 10 by count_"}
{"context": "List all actions taken or approved by administrators manually on emails after delivery", "baseline": "EmailPostDeliveryEvents\n| where ActionTrigger == 'AdminAction'"}
{"context": "Find PowerShell activities that occur right after receiving an email from malicious.sender@domain.com", "baseline": "EmailEvents \n| where SenderFromAddress =~ \"malicious.sender@domain.com\"\n| distinct RecipientObjectId, Timestamp\n| join DeviceProcessEvents on $left.RecipientObjectId == $right.AccountObjectId\n| where Timestamp1 - Timestamp between (0m .. 30m)\n| where FileName =~ \"powershell.exe\""}
{"context": "Check command lines used to launch PowerShell for strings that indicate download activity", "baseline": "DeviceProcessEvents\n| where Timestamp > ago(7d)\n| where FileName in~ (\"powershell.exe\", \"powershell_ise.exe\")\n| where ProcessCommandLine has_any(\n    \"WebClient\",\n    \"DownloadFile\",\n    \"DownloadData\",\n    \"DownloadString\",\n    \"WebRequest\",\n    \"Shellcode\",\n    \"http\",\n    \"https\"\n)"}
{"context": "List vulnerabilities that have an available exploit and were published later than 03/01/2024 09:22:06 AM.", "baseline": "DeviceTvmSoftwareVulnerabilitiesKB\n| where IsExploitAvailable has \"true\" \n| where PublishedDate > datetime(\"03/01/2024 09:22:06 AM\")"}
{"context": "Get the list of sensitive files that were uploaded to a cloud app or service in the past 7 days", "baseline": "DeviceFileEvents\n| where Timestamp > ago(7d) \n| where SensitivityLabel in (\"Highly Confidential\", \"Confidential\")\n| summarize LastTimeSeenOnDevice = max(Timestamp) by FileName, FolderPath, DeviceName , DeviceId, SensitivityLabel \n| join (\n    CloudAppEvents\n    | where ActionType == \"FileUploaded\" and Timestamp > ago(7d)\n    | extend FileName = tostring(RawEventData.SourceFileName)\n ) on FileName"}
{"context": "Find network connections by known Tor clients", "baseline": "DeviceNetworkEvents  \n| where InitiatingProcessFileName in~ (\"tor.exe\", \"meek-client.exe\")"}
{"context": "Find unremediated emails that were identified as phishing after delivery", "baseline": "EmailPostDeliveryEvents\n| where ActionType == 'Phish ZAP' \n| where ActionResult == 'Error'\n| join kind=rightsemi EmailEvents on NetworkMessageId, RecipientEmailAddress "}
{"context": "List all URLs in the body of email 099f9519-9804-4f1f-3f23-08db30e7c190", "baseline": "EmailUrlInfo\n| where NetworkMessageId =~ \"099f9519-9804-4f1f-3f23-08db30e7c190\"\n| where UrlLocation =~ \"Body\""}
{"context": "Get the list the USB devices attached to device ba9f234aab0f8cd5ccf290503bdc8b4e5393e91d in the past week", "baseline": "DeviceEvents \n| where Timestamp > ago(7d)\n| where DeviceId =~ \"ba9f234aab0f8cd5ccf290503bdc8b4e5393e91d\"\n| where ActionType contains \"UsbDriveMount\"\n| distinct AdditionalFields\n| extend AdditionalFields=parse_json(AdditionalFields)\n| evaluate bag_unpack(AdditionalFields)"}
{"context": "List all users located in the US", "baseline": "IdentityInfo \n| where Country in (\"United States\", \"US\", \"USA\")"}
{"context": "List all users in the IT department", "baseline": "IdentityInfo \n| where Department =~ \"IT\" "}
{"context": "Get all information on vulnerability CVE-2020-0791", "baseline": "DeviceTvmSoftwareVulnerabilitiesKB\n| where CveId == 'CVE-2020-0791'"}
{"context": "List devices affected by CVE-2020-0791", "baseline": "DeviceTvmSoftwareVulnerabilities\n| where CveId == 'CVE-2020-0791'"}
{"context": "Count the number of Lenovo devices", "baseline": "DeviceTvmHardwareFirmware\n| where ComponentType =~ 'Hardware' \n| where Manufacturer =~ 'lenovo'\n| count"}
{"context": "Find all devices with a BIOS version of 3.1.1", "baseline": "DeviceTvmHardwareFirmware\n| where ComponentType =~ \"Bios\"\n| where ComponentVersion =~ \"3.1.1\""}
{"context": "List software titles which are not supported anymore and the number of devices with these titles", "baseline": "DeviceTvmSoftwareInventory\n| where EndOfSupportStatus == 'EOS Software'\n| summarize dcount(DeviceId ) by SoftwareName"}
{"context": "When did \"jdoe\" last have their password changed?", "baseline": "IdentityDirectoryEvents\n| where ActionType =~ 'Account Password changed'\n| where TargetAccountDisplayName =~ 'jdoe'\n| top 1 by Timestamp desc"}
{"context": "Finds attempts to sign in to disabled accounts, listed by IP address", "baseline": "AADSignInEventsBeta\n| where ErrorCode == 50057\n| summarize count(), make_set(AccountObjectId) by IPAddress"}
{"context": "Gets a list of users that signed in from multiple locations in the last 7 days", "baseline": "AADSignInEventsBeta \n| where Timestamp > ago(7d)\n| summarize dcount(City) by AccountUpn \n| where dcount_City > 1"}
{"context": "Gets list of the top 100 most active managed identities in the last 24 days", "baseline": "AADSpnSignInEventsBeta\n| where Timestamp > ago(24d)\n| where IsManagedIdentity\n| summarize count() by ServicePrincipalId\n| top 100 by count_"}
{"context": "Gets list of service principals with no sign-ins in the last ten days", "baseline": "AADSpnSignInEventsBeta\n| where ErrorCode == 0\n| summarize max(Timestamp) by ServicePrincipalId\n| where max_Timestamp < ago(10d)"}
{"context": "Give a list of sharing activities in cloud apps", "baseline": "CloudAppEvents\n| where ActivityType =~ \"Share\""}
{"context": "find all users who's last login was between 05/01/2024 and 06/01/2024", "baseline": "IdentityLogonEvents\n| summarize arg_max(Timestamp,*) by AccountName\n| where Timestamp between  (datetime(2024-05-01) .. datetime(2024-06-02))"}
{"context": "find device names that contain surface", "baseline": "DeviceInfo\n| where DeviceName contains \"surface\""}
{"context": "find user logins from 06/01/2022 to 06/29/2022 from IP starting with 129.x.x.x", "baseline": "union DeviceLogonEvents, IdentityLogonEvents\n| where Timestamp > ago(30d)\n| where RemoteIP startswith \"129.\" or IPAddress startswith \"129.\""}
{"context": "show all iOS devices", "baseline": "DeviceInfo\n| where OSPlatform contains 'iOS'"}
{"context": "Show all logins for mhair for last 72 days", "baseline": "DeviceLogonEvents\n| where Timestamp > ago(72d)\n| where AccountName =~ 'mhair'"}
{"context": "Show all signins for mhair for last 72 days", "baseline": "DeviceLogonEvents\n| where Timestamp > ago(72d)\n| where AccountName =~ 'mhair'"}
{"context": "Show all signins for mhair for last 72 days with asn and ips", "baseline": "IdentityLogonEvents\n| where Timestamp > ago(72d)\n| where AccountName =~ 'mhair'\n| project-reorder IPAddress, ISP"}
{"context": "what ip addresses have caused recent alerts and who was the user that caused the alert", "baseline": "AlertEvidence\n| where EntityType =~ 'Ip'\n| project RemoteIP, AlertId\n| join (\n    AlertEvidence\n    | where EntityType =~ 'User'\n) on AlertId\n| project-reorder AlertId, RemoteIP, AccountName"}
{"context": "what ip addresses have caused recent alerts", "baseline": "AlertEvidence\n| where EntityType == 'Ip'\n| join  AlertInfo on AlertId\n| project-reorder RemoteIP"}
{"context": "what users triggered an alert and what ip address were they using", "baseline": "AlertEvidence\n| where EntityType =~ 'Ip'\n| project RemoteIP, AlertId\n| join (\n    AlertEvidence\n    | where EntityType =~ 'User'\n) on AlertId\n| project-reorder AlertId, RemoteIP, AccountName"}
{"context": "I want to know the signin information for the user Mark Biggley for the last 7 days", "baseline": "IdentityLogonEvents\n| where Timestamp > ago(7d)\n| where AccountDisplayName == 'Mark Biggley'"}
{"context": "show all logs for ip address 10.20.30.40 between 03/01/2024 and 03/10/2024", "baseline": "search *\n| where Timestamp > datetime(\"03/01/2024 09:22:06 AM\") and Timestamp < datetime(\"03/10/2024 09:22:06 AM\")\n| where * == \"10.20.30.40\""}
{"context": "show all logs in the last 24 days where the parent process ends with syswow64\\cmd.exe", "baseline": "DeviceProcessEvents\n| where Timestamp > ago(24d)\n| where InitiatingProcessFolderPath endswith \"syswow64\\\\cmd.exe\""}
{"context": "show where the ingest time is within the last 5 days, where the parent process ends with \\Application\\chrome.exe but the commandline does not contain \"w3wp.exe\"", "baseline": "DeviceProcessEvents\n| where Timestamp > ago(5d)\n| where InitiatingProcessFolderPath endswith \"\\\\Application\\\\chrome.exe\"\n| where ProcessCommandLine !contains \"w3wp.exe\""}
{"context": "Give me info about this device Chris-PC", "baseline": "DeviceInfo\n| where DeviceName =~ \"Chris-PC\""}
{"context": "Give me the network events between 12-12-2022 1:50 PM UTC and 12-12-2022 2:10 PM UTC for deviceid 12312412412", "baseline": "DeviceNetworkEvents\n| where Timestamp between(datetime(\"12-12-2022 1:50PM\") .. datetime(\"12-12-2022 2:10PM\"))\n| where DeviceId == \"12312412412\""}
{"context": "Give me the network events between 12-12-2022 1:50 PM UTC and 12-12-2022 2:10 PM UTC for deviceid b00cf391210874c0345b26355dcfa61f587d5d46", "baseline": "DeviceNetworkEvents\n| where Timestamp between(datetime(\"12-12-2022 1:50PM\")..datetime(\"12-12-2022 2:10PM\"))\n| where DeviceId == \"b00cf391210874c0345b26355dcfa61f587d5d46\""}
{"context": "Give me deviceregisteryevents where a registery value was set ending with -thecatman", "baseline": "DeviceRegistryEvents\n| where ActionType =~ \"RegistryValueSet\"\n| where RegistryValueData endswith \"-thecatman\""}
{"context": "Give me device registry events of a binary where the value is Q:\\\\erfbasfd.png", "baseline": "DeviceRegistryEvents\n| where InitiatingProcessFolderPath =~ \"Q:\\\\\\\\erfbasfd.png\""}
{"context": "Give me network traffic with the port 445", "baseline": "DeviceNetworkEvents\n| where RemotePort == 445 or LocalPort == 445"}
{"context": "Give me network traffic with destination ip address of 8.8.8.8", "baseline": "DeviceNetworkEvents\n| where RemoteIP == \"8.8.8.8\""}
{"context": "Give me network traffic with source ip address of 8.8.8.8", "baseline": "DeviceNetworkEvents\n| where LocalIP == \"8.8.8.8\""}
{"context": "What are all the alerts for deviceid dd0ae0c24a4eebfee923dffedea2b90eca722413", "baseline": "AlertEvidence\n| where DeviceId == \"dd0ae0c24a4eebfee923dffedea2b90eca722413\"\n| join kind=inner AlertInfo on AlertId"}
{"context": "What are all the alerts for deviceid dd0ae0c24a4eebfee923dffedea2b90eca722413 where the source contains Defender for endpoint", "baseline": "AlertInfo\n| where ServiceSource has \"Defender for Endpoint\"\n| join AlertEvidence on AlertId\n| where DeviceId == \"dd0ae0c24a4eebfee923dffedea2b90eca722413\""}
{"context": "What are all the alerts for deviceid dd0ae0c24a4eebfee923dffedea2b90eca722413 where the source contains identity", "baseline": "AlertInfo\n| where ServiceSource has \"identity\"\n| join AlertEvidence on AlertId\n| where DeviceId == \"dd0ae0c24a4eebfee923dffedea2b90eca722413\""}
{"context": "Give me all email events associated with test@gmail.com", "baseline": "EmailEvents\n| where SenderMailFromAddress =~ \"test@gmail.com\" or SenderFromAddress =~ \"test@gmail.com\" or RecipientEmailAddress =~ \"test@gmail.com\""}
{"context": "Give me all email events from sender test@gmail.com and then where recepients clicked on urls contained in those emails", "baseline": "EmailEvents\n| where SenderFromAddress =~ \"test@gmail.com\" or SenderMailFromAddress =~ \"test@gmail.com\"\n| join EmailUrlInfo on NetworkMessageId\n| join UrlClickEvents on NetworkMessageId, Url"}
{"context": "Give me all email events to recepient test@gmail.com and then where the user clicked on a url in the email", "baseline": "EmailEvents\n| where RecipientEmailAddress =~ \"test@gmail.com\"\n| join EmailUrlInfo on NetworkMessageId\n| join UrlClickEvents on NetworkMessageId, Url"}
{"context": "Give me all aad sign in events for the user test@microsoft.com and source IP is 8.8.8.8", "baseline": "AADSignInEventsBeta\n| where AccountUpn =~ \"test@microsoft.com\"\n| where IPAddress == \"8.8.8.8\""}
{"context": "Tell me total logins for each user per hour for the last 7 days", "baseline": "IdentityLogonEvents\n| where Timestamp > ago(7d)\n| summarize count() by AccountUpn, bin(Timestamp, 1h)"}
{"context": "Give me a series for each users login frequency over 7 days", "baseline": "IdentityLogonEvents\n| where Timestamp > ago(7d)\n| where ActionType =~ \"LogonSuccess\"\n| make-series count() default=0 on Timestamp from ago(7d) to now() step 1h by AccountUpn"}
{"context": "for each host in my environment, show me the bottom 1% of commandlines", "baseline": "DeviceProcessEvents\n| summarize count() by ProcessCommandLine, DeviceName\n| summarize percentile(count_, 1) by DeviceName\n| join DeviceProcessEvents on DeviceName\n| summarize count() by ProcessCommandLine, DeviceName, percentile_count__1\n| where count_ <= percentile_count__1"}
{"context": "SAW-L182760214B belongs to who? And is it compliant?", "baseline": "DeviceInfo\n| where DeviceName =~ 'SAW-L182760214B'\n| project DeviceName, LoggedOnUsers, IsAzureADJoined"}
{"context": "get the count of users who have logged in for past 7 days", "baseline": "DeviceLogonEvents\n| where Timestamp > ago(7d)\n| where ActionType == 'LogonSuccess'\n| summarize dcount(AccountName)"}
{"context": "total count of distinct users who have logged in more than 2 times for past 7 days", "baseline": "DeviceLogonEvents\n| where Timestamp > ago(7d)\n| where ActionType == \"LogonSuccess\"\n| summarize count() by AccountName\n| where count_ > 2\n| count"}
{"context": "total count of distinct users who have logged in more than their average login in the last 7 days", "baseline": "IdentityLogonEvents\n| where ActionType == 'LogonSuccess'\n| summarize count() by AccountName, bin_at(Timestamp, 7d, now())\n| summarize avg(count_) by AccountName\n| join IdentityLogonEvents on AccountName\n| where Timestamp > ago(7d)\n| where ActionType == 'LogonSuccess'\n| summarize count() by AccountName, avg_count_\n| where count_ > avg_count_\n| count"}
{"context": "number of different security alerts fired in last 7 days", "baseline": "AlertInfo\n| where Timestamp > ago(7d)\n| summarize dcount(Title)"}
{"context": "show me all security alerts like \"team viewer\"", "baseline": "AlertInfo\n| where Title contains 'team viewer'"}
{"context": "show me secuirty alerts that contain \"impossible travel\" in the last 30-days", "baseline": "AlertInfo\n| where Timestamp > ago(30d)\n| where Title contains 'impossible travel'"}
{"context": "Show we top 5 rare processes in last 24 days", "baseline": "DeviceProcessEvents\n| where Timestamp > ago(24d)\n| where ActionType == 'ProcessCreated'\n| summarize count() by FileName\n| top 5 by count_ asc"}
{"context": "Show me rare DNS domains in the last 10 days", "baseline": "DeviceEvents\n| where Timestamp > ago(10d)\n| where ActionType == 'DnsQueryResponse'\n| extend DnsQuery = tostring(parse_json(AdditionalFields).DnsQueryString)\n| summarize count() by DnsQuery\n| sort by count_ asc"}
{"context": "Top 5 rare executable paths", "baseline": "DeviceProcessEvents\n| where ActionType == 'ProcessCreated'\n| summarize count() by FolderPath\n| top 5 by count_ asc"}
{"context": "Show me all alerts that have 'crypto' in the name", "baseline": "AlertInfo\n| where Title contains 'crypto'"}
{"context": "Show me all results for where Cmdline contains - set all profile state off", "baseline": "DeviceProcessEvents\n| where InitiatingProcessCommandLine contains 'set all profile state off'"}
{"context": "Show me alerts that have priority of high", "baseline": "AlertInfo\n| where Severity == \"High\""}
{"context": "Show me alerts that have priority of high in the last 7 days", "baseline": "AlertInfo\n| where Timestamp > ago(7d)\n| join AlertEvidence on AlertId\n| where Severity =~ 'High'"}
{"context": "Show me all machines that went to \"bbc.com\" in last 7 days", "baseline": "DeviceNetworkEvents\n| where Timestamp > ago(7d)\n| where RemoteUrl has 'bbc.com'\n| distinct DeviceName"}
{"context": "Show me the unique URLs in last 7 days that have been visited by less than 2 machines", "baseline": "DeviceNetworkEvents\n| where Timestamp > ago(7d)\n| summarize dcount(DeviceId) by RemoteUrl\n| where dcount_DeviceId < 2"}
{"context": "For users that are in Security alerts in last 7 days show me all the failed logons", "baseline": "AlertEvidence\n| where Timestamp > ago(7d)\n| where EntityType == 'User'\n| join kind=rightsemi DeviceLogonEvents on AccountName\n| where ActionType == 'LogonFailed'"}
{"context": "Show me all users who had a logon failure followed by success", "baseline": "DeviceLogonEvents\n| where ActionType == 'LogonFailed'\n| join (DeviceLogonEvents \n| where ActionType == 'LogonSuccess'\n| project AccountName, SuccessTimestamp = Timestamp) on AccountName\n| where SuccessTimestamp > Timestamp\n| distinct AccountName"}
{"context": "I want to see the number of failed logins per failure type over the last 24 days", "baseline": "IdentityLogonEvents\n| where Timestamp > ago(24d)\n| where ActionType == 'LogonFailed'\n| summarize count() by FailureReason"}
{"context": "types of os used by users in last 6 days", "baseline": "IdentityLogonEvents\n| where Timestamp > ago(6d)\n| distinct OSPlatform"}
{"context": "users who failed to login more than two times from outside of US in the last 7 day", "baseline": "IdentityLogonEvents\n| where Timestamp > ago(7d)\n| where ActionType == 'LogonFailed'\n| where Location != 'US'\n| summarize count() by AccountName\n| where count_ > 2"}
{"context": "IPs that failed login to multiple accounts in the last 2 hours", "baseline": "IdentityLogonEvents\n| summarize dcount(AccountName) by IPAddress\n| where dcount_AccountName > 1"}
{"context": "Find all systems that resolved 'google.com'", "baseline": "DeviceEvents\n|where ActionType == 'DnsQueryResponse'\n| mv-expand parse_json(AdditionalFields).DnsQueryString to typeof(string)\n| where AdditionalFields_DnsQueryString has 'google.com'"}
{"context": "Find all users in China who have more than 10 failed logins in the last 48 days", "baseline": "IdentityLogonEvents\n| where Timestamp > ago(48d)\n| where ActionType == 'LogonFailed'\n| where Location == 'CN'\n| summarize count() by AccountName\n| where count_ > 10"}
{"context": "types of os used by users in the last 6 days", "baseline": "DeviceInfo\n| where Timestamp > ago(6d)\n| distinct OSPlatform"}
{"context": "types of os used by signed in users in the last 6 days", "baseline": "IdentityLogonEvents\n| where Timestamp > ago(6d)\n| where ActionType =~ \"LogonSuccess\"\n| distinct OSPlatform"}
{"context": "I need to know when and from what location did all users containing \"Larry Shaw\" signed in within the last 14 days.", "baseline": "IdentityLogonEvents\n| where Timestamp > ago(14d)\n| where AccountDisplayName has 'Larry Shaw'"}
{"context": "office 365 logins for alias mapadilla in the last 24 days", "baseline": "IdentityLogonEvents\n| where Timestamp > ago(24d)\n| where ActionType =~ \"LogonSuccess\"\n| where Application =~ 'Office 365'  \n| where AccountName =~ 'mapadilla'"}
{"context": "Show all failed logins from outside the US", "baseline": "IdentityLogonEvents\n| where ActionType == 'LogonFailed'\n| where Location != 'US'"}
{"context": "Show all failed attempts at sign in within the past 7 days", "baseline": "IdentityLogonEvents\n| where Timestamp > ago(7d)\n| where ActionType == 'LogonFailed'"}
{"context": "I need to know everyone that had outbound traffic going to IP 73.123.113.4 in the last 2 weeks.", "baseline": "DeviceNetworkEvents\n| where Timestamp > ago(14d)\n| where RemoteIP == '73.123.113.4'"}
{"Data source": "NL2KQL - Security Co-Pilot.xlsx - NLKQL pairs", "context": "For all phishing mails, Make me a table with list of senders email address, recipient email address and Subject of the mail ?", "baseline": "EmailEvents\n| where  ThreatTypes contains \"Phish\" and EmailDirection == \"Inbound\"\n| project Timestamp, SenderMailFromAddress, RecipientEmailAddress, Subject"}
{"Data source": "NL2KQL - Security Co-Pilot.xlsx - NLKQL pairs", "context": "Show me 100 inbound phishing emails and the details of users who have clicked on the phishing link in these emails and visited the website/link?", "baseline": "EmailEvents\n| where ThreatTypes has \"Phish\" and EmailDirection == \"Inbound\"\n| project Timestamp, NetworkMessageId, InternetMessageId, SenderMailFromAddress, SenderDisplayName, RecipientEmailAddress, Subject, ThreatTypes, DetectionMethods, EmailAction\n| join kind = inner (UrlClickEvents) on NetworkMessageId\n| project Timestamp,ActionType,Workload,AccountUpn,Url,UrlChain\n| limit 100"}
{"Data source": "NL2KQL - Security Co-Pilot.xlsx - NLKQL pairs", "context": "Check for the users who has successfullly logged into our resources from different IP address and location from past 30 days?", "baseline": "IdentityLogonEvents\n| where ActionType contains \"LogonSuccess\"\n| project Timestamp, ActionType, AccountUpn, IPAddress, Location, ISP"}
{"Data source": "NL2KQL - Security Co-Pilot.xlsx - NLKQL pairs", "context": "Get me the list of documents downloaded by the user johndoe@contoso.com from past 30 days ?", "baseline": "let Users = dynamic([\"johndoe@contoso.com\"]);\nCloudAppEvents\n| where ActionType has_any (\"FileDownloaded\",\"FileDownloadedFromBrowser\")\n| where AccountDisplayName\nin~ (Users)"}
{"Data source": "NL2KQL - Security Co-Pilot.xlsx - NLKQL pairs", "context": "Search in Threat Intel feeds about the vulnerabilities \"CVE-2022-20246\", \"CVE-2023-36540\" and relation to ransomware ", "baseline": "let cve_list = dynamic([\"CVE-2023-36540\", \"CVE-2022-20246\"]);\nDeviceTvmSoftwareVulnerabilities\n| where CveId in~ (cve_list)"}
{"Data source": "NL2KQL - Security Co-Pilot.xlsx - NLKQL pairs", "context": "What are all devices that are scanning on well known ports?", "baseline": "DeviceNetworkEvents\n| where LocalIPType contains \"Private\"\n| where RemotePort in (\"21\", \"22\", \"23\", \"25\", \"53\", \"80\", \"88\", \"110\", \"111\", \"135\", \"139\", \"143\", \"389\",\"443\" \"445\", \"993\", \"995\", \"1723\", \"3306\", \"3389\", \"5900\", \"8080\")\n| summarize by Timestamp, RemoteIP, LocalIP, RemotePort, LocalIPType, ActionType\n| sort by Timestamp desc"}